const categoryArray = [
    "Adult Content",
    "Alcohol/Drugs",
    "Comedy",
    "Conspiracy",
    "Education",
    "Gambling",
    "Gaming",
    "Horror",
    "LGBT",
    "Movies/TV",
    "Music",
    "News/Politics",
    "Promotional",
    "Religion",
    "Romance",
    "Sports",
    "Violence",
    "Vlog"
];
const page = {
    HOME : "https://www.youtube.com/",
    TRENDING : "https://www.youtube.com/feed/trending",
    SUBSCRIPTIONS : "https://www.youtube.com/feed/subscriptions",
    SEARCH : "https://www.youtube.com/results",
    VIDEO : "https://www.youtube.com/watch",
    CHANNEL : "https://www.youtube.com/c", // FIXME: Multiple urls
    PLAYLIST : "https://www.youtube.com/playlist",
    MIX : "https://www.youtube.com/watch?v=&list="
};
const windowMessages = {
    SendCurator : "SubmitVT",
    FilterHome : "FilterHome"
};

let primaryInner = document.getElementById("primary-inner");

//Checks on initial visit to youtube page
window.onload = function() {
    OnPageChange();
};

//Checks on page change (YouTube does partial loads and can be detected by 'yt-navigate-start' and 'yt-navigate-finish')
window.addEventListener('yt-navigate-finish', OnPageChange);

/**
 * 
 * @param {URL} url 
 */
function getVideoID(url = new URL(window.location.href)) {
    return (new URLSearchParams(url.search)).get('v');
}

// FIXME
function OnPageChange() {
    switch (window.location.href) {
        case (page.HOME):
            window.postMessage(windowMessages.FilterHome, '*');
            break;
        // case (page.TRENDING):
            // FilterTrendingPage();
            // break;
        // case (page.SUBSCRIPTIONS):
            // FilterSubscriptionsPage();
            // break;
        default:
            if ( (window.location.href).includes(page.VIDEO)) {
                chrome.runtime.sendMessage({greeting: "IsCurator"}, function(response) {
                    if (!document.getElementById("VTCurator") && response.farewell == "true") {
                        createCuratorDiv();
                    }
                });
                chrome.runtime.sendMessage({greeting: "DisableComments"}, function(response) {
                    if (response.farewell == "true") {
                        removeComments();
                    }
                });
                // Filter Recommendations
            } else if ( (window.location.href).includes(page.CHANNEL) ) {
                if ( (window.location.href).includes("/videos")) {
                    // VIDEOS PAGE
                    console.log(FilterChannelVideoPage());
                } else {
                    console.log(FilterChannelHomePage());
                }
            }
    }
}

/**
 * Used in curator mode, this function iterates through and creates checkboxes
 * @param {Array<String>} categoryArray 
 */
function addCategories(categoryArray) {
    let innerHTML = "<div id=\"categories\" style=\"column-count:2;\">";
    categoryArray.forEach(element => {
        innerHTML += "<input type=\"checkbox\" id=\"" + element + "\" name=\"filters[]\" value=\"" + element + "\"><label for=\"" + element + "\">" + element + "</label><br>";
    });

    innerHTML += "</div>";
    return innerHTML;
}

/**
 * This behemoth of a function does one simple task, it creates the Curator Div when Curator Mode has been enabled.
 * NOTE: This is only for creating training data for the neural network.
 */
function createCuratorDiv() {
    if (document.getElementById("VTCurator")) {
        return;
    }
    let primaryInner = document.getElementById("primary-inner");
    let curatorDiv = document.createElement("div");
    curatorDiv.setAttribute('id', 'VTCurator');
    curatorDiv.setAttribute('class', 'style-scope ytd-watch-flexy');
    let metaIndex;
    for (let index = 0; index < primaryInner.childNodes.length; index++) {
        if (primaryInner.childNodes[index].id ==="meta") {
            metaIndex = index;
            break;
        }
    }
    primaryInner.insertBefore(curatorDiv, primaryInner.childNodes[metaIndex+1]);

    curatorDiv = document.getElementById("VTCurator");
    // Now we are modifying inside curatorDiv
    let a = document.createElement("ytd-video-secondary-info-renderer");
    a.setAttribute('class', 'style-scope ytd-watch-flexy');
    curatorDiv.appendChild(a);
    // clear autogenerated content
    a.innerHTML = "";

    let VTForm = document.createElement("form");
    VTForm.setAttribute("id", "VTForm");
    VTForm.setAttribute("name", "VTForm");
    VTForm.setAttribute("enctype", "multipart/form-data");
    VTForm.setAttribute("method", "post");
    a.appendChild(VTForm);

    let heading = document.createElement("h2");
    heading.innerHTML = "ValueTube Curator";
    heading.setAttribute('class', 'title style-scope ytd-video-primary-info-renderer');
    heading.setAttribute("style", "padding-bottom:5px;");
    VTForm.appendChild(heading);
    let b = document.createElement("ytd-expander");
    b.setAttribute('class', 'style-scope ytd-video-secondary-info-renderer');
    b.setAttribute('style', '--ytd-expander-collapsed-height:80px;');
    b.setAttribute('collapsed', '""');
    VTForm.appendChild(b);
    let content;
    //Add show more and show less button
    for (let index = 0; index < b.childNodes.length; index++) {
        if (b.childNodes[index].id == "content") {
            content = b.childNodes[index];
        } else if (b.childNodes[index].id == "less") {
            let less = document.createElement("yt-formatted-string");
            less.setAttribute('class', 'less-button style-scope ytd-video-secondary-info-renderer');
            less.setAttribute('slot', 'less-button');
            less.setAttribute('role', 'button');
            b.childNodes[index].appendChild(less);
            less.innerHTML = "Show Less";
        } else if (b.childNodes[index].id == "more") {
            let more = document.createElement("yt-formatted-string");
            more.setAttribute('class', 'less-button style-scope ytd-video-secondary-info-renderer');
            more.setAttribute('slot', 'more-button');
            more.setAttribute('role', 'button');
            b.childNodes[index].appendChild(more);
            more.innerHTML = "Show More";
        }
    }
    let c = document.createElement("div");
    c.setAttribute('id', 'content')
    c.setAttribute('class', 'style-scope ytd-expander');
    content.appendChild(c);
    // d will contain checkboxes
    let d = document.createElement("yt-formatted-string");
    d.setAttribute('class', 'content style-scope ytd-video-secondary-info-renderer');
    d.setAttribute('force-default-style', '""');
    d.setAttribute('split-lines', '""');
    c.appendChild(d);
    d.innerHTML = addCategories(categoryArray);

    //secondary info renderer
    let infoRenderer = document.createElement("div");
    infoRenderer.setAttribute("class", "style-scope ytd-video-secondary-info-renderer");
    VTForm.appendChild(infoRenderer);
    infoRenderer.innerHTML = "";

    
    // Submit button
    let buttonDiv = document.createElement("div");
    buttonDiv.setAttribute("class", "style-scope ytd-video-secondary-info-renderer");
    
    infoRenderer.appendChild(buttonDiv);

    let buttonRenderer = document.createElement("ytd-subscribe-button-renderer");
    buttonRenderer.setAttribute("class", "style-scope ytd-video-secondary-info-renderer");
    buttonRenderer.setAttribute("use-keyboard-focused", "");
    buttonRenderer.setAttribute("style", "display:flow-root; text-align:right;");

    buttonDiv.appendChild(buttonRenderer);
    buttonRenderer.innerHTML = "";

    let paperButton = document.createElement("paper-button");
    paperButton.setAttribute("noink", "");
    paperButton.setAttribute("id", "VTSubmitButton");
    paperButton.setAttribute("class", "style-scope ytd-subscribe-button-renderer");
    paperButton.setAttribute("role", "button");
    paperButton.setAttribute("tabindex", "0");
    paperButton.setAttribute("animated", "");
    paperButton.setAttribute("elevation", "0");
    paperButton.setAttribute("aria-disabled", "false");
    paperButton.setAttribute("style", "background-color: #00a6ff; display: inline-block; margin-right: 40px;");

    paperButton.setAttribute("onclick", "window.postMessage('" + windowMessages.SendCurator + "', '*')");

    buttonRenderer.appendChild(paperButton);

    let formattedString = document.createElement("yt-formatted-string");
    formattedString.setAttribute("class", "style-scope ytd-subscribe-button-renderer")
    formattedString.setAttribute("style", "");
    
    paperButton.appendChild(formattedString);
    formattedString.innerHTML = "Submit";
    
}

// ------------------ CURATOR FUNCTIONS ---------------------
function removeCuratorDiv() {
    primaryInner = document.getElementById("primary-inner");
    for (let index = 0; index < primaryInner.childNodes.length; index++) {
        if (primaryInner.childNodes[index].id === "VTCurator") {
            primaryInner.removeChild(primaryInner.childNodes[index]);
            break;
        }
    }
}
// ------------------ END CURATOR FUNCTION ------------------

function GetSection() {
    return document.getElementById("contents");
}

function ModifyRecommendationFeed() {
    let videoIDs = [];

	let videos = document.getElementsByTagName('ytd-compact-video-renderer');

	for(index = 0; index < videos.length; index++){

		let link = videos[index].getElementsByTagName("a")[0].getAttribute('href');

		let videoID = getVideoId(new URL(link, "https://www.youtube.com"))

		if(videoID == null){
			continue;
		}
		
		videoIDs.push({"vID": videoID, "value": false});
	}


	return videoIDs;
    
}

function addCommentMessage(commentSection) {
    let itemSection = document.createElement("ytd-item-section-renderer");
    itemSection.id = "sections";
    itemSection.setAttribute("initial-count", "2");
    itemSection.class = "style-scope ytd-comments";

    commentSection.appendChild(itemSection);

    itemSection = commentSection.getElementsByTagName("ytd-item-section-renderer")[0];
    for (let index = 0; index < itemSection.childNodes.length; index++) {
        if (itemSection.childNodes[index].id === "contents") {
            contents = itemSection.childNodes[index];
            break;
        }
    }

    messageRenderer = document.createElement("ytd-message-renderer");
    messageRenderer.class = "style-scope ytd-item-section-renderer";
    contents.appendChild(messageRenderer);

    ytdMessageRenderer = contents.childNodes[0];

    spanText = document.createElement("span");
    spanText.dir = "auto";
    spanText.class = "style-scope yt-formatted-string";
    spanText.innerHTML = "Comments are turned off by the ValueTube Extension";

    for (let index = 0; index < ytdMessageRenderer.childNodes.length; index++) {
        if (ytdMessageRenderer.childNodes[index].id === "message") {
            message = ytdMessageRenderer.childNodes[index];
            break;
        }
    }

    message.appendChild(spanText);
    
}

function removeComments() {
    const commentSection = document.getElementsByTagName("ytd-comments")[0];

    let observer = new MutationObserver(mutations => {
        for(let mutation of mutations) {
             for(let addedNode of mutation.addedNodes) {
                 if (addedNode.parentElement === commentSection && addedNode.nodeName === "YTD-ITEM-SECTION-RENDERER") {
                    observer.disconnect();
                    addedNode.parentNode.removeChild(addedNode);
                    addCommentMessage(commentSection);
                  }
              }
         }
     });
     observer.observe(commentSection, { childList: true, subtree: true });
}

/** 
* @param {url} url
*/
function returnVideo(url){

    let contents = getVideoID();
    let getVideoID = []; 

    let href = document.getElementById('ytd-video-renderer'); 
    videos.forEach(element => {
        let link = element.getElementById("a")[0].getAttribute("href");
        let getVideoID = getVideoID(new URL(link,"http://www.youtube.com"));
        videos.push({getVideoID : false});
        
    });


}

/**
 * This function collects every videos ID from the YouTube Homepage
*/
function GetHomePageVideoIDs() {
    let contents = GetSection();
    let videoIDs = [];
    let videoObjects = [];
    // TODO: Depending on users options remove posts
    // let sections = contents.getElementsByTagName("ytd-rich-section-renderer");
    let videos = contents.getElementsByTagName("ytd-rich-item-renderer");
    for (let index = 0; index < videos.length; index++) {
        let link = videos[index].getElementsByTagName("a")[0].getAttribute("href");
        let videoID =  getVideoID(new URL(link, "https://www.youtube.com"));
        // If first link is a channel ID (e.g. youtube posts)
        if (videoID == null) {
            continue;
        }
        videoIDs.push(videoID);
        videoObjects.push({"vID" : videoID, "element" : videos[index]});
    }
    return {videoIDs, videoObjects};
}

/**
 * This function gets the Form Data from curator and merges that with the videoID.
 */
function CreateJForm() {
    let formData = new FormData(document.forms.namedItem("VTForm")); 
    let JForm = {"vID" : getVideoID()};
        
    for (var pair of formData.entries()) {
        if (pair[0].includes("[]")) {
            if (pair[0] in JForm) {
                JForm[pair[0]].push(pair[1]);
            } else {
                JForm[pair[0]] = [pair[1]];
            }
        } else {
            JForm[pair[0]] = pair[1];
        }
    }
    return JForm;
}

// ------------------ CHANNEL PAGE FUNCTIONS -------------------------

//HOME
function FilterChannelHomePage() {
    let sections = GetSection().querySelectorAll("ytd-item-section-renderer");
    let videoIDs = [];
    let videoObjects = [];
    sections.forEach(element => {
        let innerContents = element.children["contents"];
        if (innerContents["children"][0].tagName.toLowerCase() == "ytd-channel-video-player-renderer") {
            // Video Player
            let videoID = getVideoID(new URL(innerContents.getElementsByClassName("complex-string")[0].children[0].href));
            videoIDs.push(videoID);
            videoObjects.push({"vID" : videoID, "element" : innerContents});
        } else if (innerContents["children"][0].tagName.toLowerCase() == "ytd-shelf-renderer") {
            // Video Shelf
            let items = innerContents.children[0].children[0].children["contents"].children[0].children[1].children[0];
            console.log(items);
            for (let i = 0; i < items.childElementCount; i++) {
                let videoID = getVideoID(new URL(items["children"][0].getElementsByTagName("a")[0].href));
                videoIDs.push(videoID);
                videoObjects.push({"vID" : videoID, "element" : items["children"][0]});
            }

        }
    });
    return {"videoIDs": videoIDs, "videoObjects": videoObjects};
}

//VIDEOS
function FilterChannelVideoPage() {
    let primary = document.getElementsByTagName("ytd-two-column-browse-results-renderer");
    let videoIDs = [];
    let videoObjects = [];
    for (let i = 0; i < primary.length; i++) {
        let innerContents = primary[i].children["primary"].children[0].children["contents"].children[0].children["contents"].children[0]["children"]["items"]
        for (let index = 0; index < innerContents.childElementCount; index++) {
            let videoID = getVideoID(innerContents.children[index].getElementsByTagName("a")[0].href);
            videoIDs.push(videoIDs);
            videoObjects.push({"vID" : videoID, "element" : innerContents.children[index]});
        }
    }
    return {"videoIDs": videoIDs, "videoObjects": videoObjects};
}

// ------------------ END CHANNEL PAGE FUNCTIONS ---------------------
window.addEventListener("message", function(event) {
    if (event.source != window)
        return

    if (event.data) {
        switch (event.data) {
            case windowMessages.SendCurator:
                let JForm = CreateJForm();
                chrome.runtime.sendMessage({greeting : windowMessages.SendCurator, data : JForm});
                break;
            case windowMessages.FilterHome:
                // TODO: Need to send user filters
                let homePageInfo = GetHomePageVideoIDs();
                chrome.runtime.sendMessage({greeting : windowMessages.FilterHome, data : homePageInfo["videoIDs"]});
                break;
            default:
                console.error("An error occurred trying to communicate with the extension.");
                break;
        }
    }
})
